# app.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import streamlit as st
import time
from datetime import datetime
import numpy as np

class FPSOSpiritLite:
    def __init__(self):
        self.project_name = "FPSO SPIRIT LITE"
        self.version = "4.0"
        self.update_interval = 10  # 10 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 2
        self.simple_mode = True
        
        if 'systems' not in st.session_state:
            self._initialize_lightweight_systems()
    
    def _initialize_lightweight_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        from core.system_state_lite import SystemStateLite
        from modules.cargo_system_lite import CargoSystemLite
        from modules.ballast_system_lite import BallastSystemLite
        from modules.esd_system_lite import ESDSystemLite
        
        st.session_state.systems = {
            'system_state': SystemStateLite(),
            'cargo': CargoSystemLite(),
            'ballast': BallastSystemLite(),
            'esd': ESDSystemLite(),
        }
        st.session_state.last_update = datetime.now()
        st.session_state.auto_refresh = False
    
    def run_optimized(self):
        # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        st.set_page_config(
            page_title="FPSO SPIRIT - CCR Simulator",
            page_icon="‚öì",
            layout="wide",
            initial_sidebar_state="collapsed"
        )
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CSS
        st.markdown("""
        <style>
        .main-title { text-align: center; color: #1E90FF; font-size: 2rem; margin-bottom: 0; }
        .metric-card { border: 1px solid #ddd; padding: 10px; border-radius: 5px; margin: 5px 0; }
        </style>
        """, unsafe_allow_html=True)
        
        st.markdown(f'<h1 class="main-title">‚öì FPSO SPIRIT LITE</h1>', unsafe_allow_html=True)
        st.caption(f"Optimized for Streamlit ‚Ä¢ v{self.version}")
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú
        col1, col2 = st.columns([3, 1])
        with col1:
            st.info("üîß **–†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏**: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", use_container_width=True):
                st.rerun()
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ)
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫)", value=False)
        if auto_refresh and time.time() - st.session_state.last_update.timestamp() > self.update_interval:
            self._update_systems_lightweight()
            st.session_state.last_update = datetime.now()
            st.rerun()
        
        # –û–°–ù–û–í–ù–´–ï –í–ö–õ–ê–î–ö–ò
        tab1, tab2, tab3, tab4 = st.tabs([
            "üè† –ì–õ–ê–í–ù–´–ô –©–ò–¢", 
            "üõ¢Ô∏è –ì–†–£–ó–û–í–´–ï –û–ü–ï–†.",
            "üåä –ë–ê–õ–õ–ê–°–¢", 
            "üö® –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨"
        ])
        
        with tab1:
            self._render_main_dashboard_lite()
        with tab2:
            self._render_cargo_lite()
        with tab3:
            self._render_ballast_lite()
        with tab4:
            self._render_safety_lite()
    
    def _update_systems_lightweight(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º"""
        try:
            systems = st.session_state.systems
            
            # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            systems['cargo'].calculate_flows_simple()
            systems['ballast'].calculate_ballast_simple(systems['system_state'])
            systems['esd'].check_critical_triggers(systems)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
    
    def _render_main_dashboard_lite(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —â–∏—Ç"""
        systems = st.session_state.systems
        
        st.header("üéõÔ∏è –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –©–ò–¢")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¢–ê–¢–£–°–´
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # ESD —Å—Ç–∞—Ç—É—Å
            esd_active = any([systems['esd'].esd_level_1, systems['esd'].esd_level_2])
            st.metric("ESD", "üî¥ –ê–ö–¢–ò–í" if esd_active else "üü¢ –ù–û–†–ú–ê")
            
        with col2:
            # –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–Ω–∫–æ–≤
            overflow = any(tank.volume_percentage > 95 for tank in systems['cargo'].tanks.values())
            st.metric("–¢–ê–ù–ö–ò", "üî¥ –ü–ï–†–ï–ü–û–õ–ù." if overflow else "üü¢ –ù–û–†–ú–ê")
            
        with col3:
            # –ö—Ä–µ–Ω
            heel_status = "üî¥ –û–ü–ê–°–ù–û" if abs(systems['system_state'].heel) > 8 else "üü° –í–ù–ò–ú–ê–ù–ò–ï" if abs(systems['system_state'].heel) > 5 else "üü¢ –ù–û–†–ú–ê"
            st.metric("–ö–†–ï–ù", heel_status)
            
        with col4:
            # –û–±—â–∏–π –≥—Ä—É–∑
            st.metric("–ì–†–£–ó", f"{systems['cargo'].total_cargo_onboard:,.0f} m¬≥")
        
        # –ë–´–°–¢–†–´–ï –û–ü–ï–†–ê–¶–ò–ò
        st.subheader("üöÄ –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            if st.button("üì§ –ù–ê–ß–ê–¢–¨ –û–¢–ì–†–£–ó–ö–£", use_container_width=True):
                st.info("–û—Ç–≥—Ä—É–∑–∫–∞: 1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–ª–∞–ø–∞–Ω—ã 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å–æ—Å—ã")
                
        with col2:
            if st.button("üì• –ù–ê–ß–ê–¢–¨ –ü–û–ì–†–£–ó–ö–£", use_container_width=True):
                st.info("–ü–æ–≥—Ä—É–∑–∫–∞: 1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ç–∞–Ω–∫–∏ 2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–ª–∞–ø–∞–Ω—ã")
                
        with col3:
            if st.button("üåä –ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–¢–¨ –ë–ê–õ–õ–ê–°–¢", use_container_width=True):
                st.info("–ë–∞–ª–ª–∞—Å—Ç: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–Ω–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫—Ä–µ–Ω–∞")
                
        with col4:
            if st.button("üö® ESD-1", use_container_width=True):
                systems['esd'].activate_esd(1, "–†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–û–ø–µ—Ä–∞—Ç–æ—Ä")
                st.rerun()
                
        with col5:
            if st.button("üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú", use_container_width=True):
                st.json({
                    "cargo_flow": systems['cargo'].export_flow_m3h,
                    "ballast_heel": systems['system_state'].heel,
                    "esd_status": systems['esd'].esd_level_1,
                    "tank_levels": {name: tank.volume_percentage for name, tank in systems['cargo'].tanks.items()}
                })
    
    def _render_cargo_lite(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –≥—Ä—É–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        systems = st.session_state.systems
        
        st.header("üõ¢Ô∏è –ì–†–£–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–≠–∫—Å–ø–æ—Ä—Ç", f"{systems['cargo'].export_flow_m3h:.1f} m¬≥/h")
        with col2:
            st.metric("–í—Å–µ–≥–æ –≥—Ä—É–∑–∞", f"{systems['cargo'].total_cargo_onboard:,.0f} m¬≥")
        with col3:
            active_pumps = sum(1 for pump in systems['cargo'].pumps.values() if pump.is_running)
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å–æ—Å—ã", active_pumps)
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ê–ü–ê–ù–ê–ú–ò - –¢–û–õ–¨–ö–û –û–°–ù–û–í–ù–´–ï
        st.subheader("üéõÔ∏è –û–°–ù–û–í–ù–´–ï –ö–õ–ê–ü–ê–ù–´")
        
        # –ì—Ä—É–∑–æ–≤—ã–µ —Ç–∞–Ω–∫–∏
        st.write("**–ì—Ä—É–∑–æ–≤—ã–µ —Ç–∞–Ω–∫–∏:**")
        cols = st.columns(6)
        tank_names = ["TANK_1", "TANK_2", "TANK_3", "TANK_4", "TANK_5", "TANK_6"]
        
        for i, tank_name in enumerate(tank_names):
            with cols[i]:
                valve_state = systems['cargo'].valves.get(f"V-{tank_name}", False)
                new_state = st.checkbox(tank_name, value=valve_state, key=f"valve_{tank_name}")
                if new_state != valve_state:
                    systems['cargo'].valves[f"V-{tank_name}"] = new_state
                    st.rerun()
                
                # –ü—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è
                tank = systems['cargo'].tanks[tank_name]
                level_color = "red" if tank.volume_percentage > 95 else "orange" if tank.volume_percentage > 85 else "green"
                st.markdown(f"<span style='color:{level_color}'>{tank.volume_percentage:.1f}%</span>", 
                           unsafe_allow_html=True)
        
        # –°–ò–°–¢–ï–ú–ù–´–ï –ö–õ–ê–ü–ê–ù–´
        st.write("**–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª–∞–ø–∞–Ω—ã:**")
        sys_cols = st.columns(4)
        system_valves = ["V-EXPORT", "V-CROSSOVER", "V-SLOP1", "V-SLOP2"]
        
        for i, valve_name in enumerate(system_valves):
            with sys_cols[i]:
                valve_state = systems['cargo'].valves.get(valve_name, False)
                new_state = st.checkbox(valve_name, value=valve_state, key=f"sys_{valve_name}")
                if new_state != valve_state:
                    systems['cargo'].valves[valve_name] = new_state
                    st.rerun()
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–û–°–ê–ú–ò
        st.subheader("‚öôÔ∏è –ù–ê–°–û–°–´")
        pump_cols = st.columns(3)
        
        for i, (pump_name, pump) in enumerate(systems['cargo'].pumps.items()):
            with pump_cols[i]:
                if st.button(f"{'‚èπÔ∏è' if pump.is_running else '‚ñ∂Ô∏è'} {pump_name}", 
                           use_container_width=True):
                    if pump.is_running:
                        pump.stop()
                    else:
                        pump.start()
                    st.rerun()
                
                st.caption(f"–†–∞—Å—Ö–æ–¥: {pump.current_flow_m3h:.0f} m¬≥/h")
    
    def _render_ballast_lite(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–∞–ª–ª–∞—Å—Ç–∞"""
        systems = st.session_state.systems
        
        st.header("üåä –ë–ê–õ–õ–ê–°–¢ –ò –û–°–ê–î–ö–ê")
        
        # –ü–ê–†–ê–ú–ï–¢–†–´
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ö—Ä–µ–Ω", f"{systems['system_state'].heel:.1f}¬∞")
        with col2:
            st.metric("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ç", f"{systems['system_state'].trim:.1f}¬∞")
        with col3:
            st.metric("–û—Å–∞–¥–∫–∞", f"{systems['system_state'].draft_mean:.2f} –º")
        
        # –ü–†–û–°–¢–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–õ–ê–°–¢–û–ú
        st.subheader("üíß –ë–´–°–¢–†–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø")
        
        # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        auto_correct = st.checkbox("ü§ñ –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø –ö–†–ï–ù–ê", 
                                 value=systems['ballast'].auto_heel_correction)
        if auto_correct != systems['ballast'].auto_heel_correction:
            systems['ballast'].auto_heel_correction = auto_correct
            st.rerun()
        
        # –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        st.write("**–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫—Ä–µ–Ω–∞:**")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚¨ÖÔ∏è –£–í–ï–õ–ò–ß–ò–¢–¨ –ë–ê–õ–õ–ê–°–¢ –õ–ï–í–´–ô –ë–û–†–¢", use_container_width=True):
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                systems['ballast'].tanks["BALLAST_1P"].current_volume_m3 += 500
                systems['ballast'].tanks["BALLAST_2P"].current_volume_m3 += 500
                st.rerun()
                
        with col2:
            if st.button("‚û°Ô∏è –£–í–ï–õ–ò–ß–ò–¢–¨ –ë–ê–õ–õ–ê–°–¢ –ü–†–ê–í–´–ô –ë–û–†–¢", use_container_width=True):
                systems['ballast'].tanks["BALLAST_1S"].current_volume_m3 += 500
                systems['ballast'].tanks["BALLAST_2S"].current_volume_m3 += 500
                st.rerun()
        
        # –°–¢–ê–¢–£–° –ë–ê–õ–õ–ê–°–¢–ù–´–• –¢–ê–ù–ö–û–í
        st.subheader("üìä –ë–ê–õ–õ–ê–°–¢–ù–´–ï –¢–ê–ù–ö–ò")
        
        ballast_tanks = ["BALLAST_1P", "BALLAST_1S", "BALLAST_2P", "BALLAST_2S"]
        cols = st.columns(4)
        
        for i, tank_name in enumerate(ballast_tanks):
            with cols[i]:
                tank = systems['ballast'].tanks[tank_name]
                st.write(f"**{tank_name}**")
                st.progress(tank.volume_percentage / 100)
                st.write(f"{tank.current_volume_m3:.0f} m¬≥")
    
    def _render_safety_lite(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        systems = st.session_state.systems
        
        st.header("üö® –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        
        # ESD –°–ò–°–¢–ï–ú–ê
        st.subheader("üõë –ê–í–ê–†–ò–ô–ù–´–ô –û–°–¢–ê–ù–û–í")
        
        esd = systems['esd']
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üü° ESD-1", use_container_width=True, disabled=esd.esd_level_1):
                esd.activate_esd(1, "–†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–û–ø–µ—Ä–∞—Ç–æ—Ä")
                st.rerun()
            st.caption("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä—É–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
            
        with col2:
            if st.button("üü† ESD-2", use_container_width=True, disabled=esd.esd_level_2):
                esd.activate_esd(2, "–†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–û–ø–µ—Ä–∞—Ç–æ—Ä")
                st.rerun()
            st.caption("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
            
        with col3:
            if st.button("üî¥ ESD-3", use_container_width=True, disabled=esd.esd_level_3):
                esd.activate_esd(3, "–†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–û–ø–µ—Ä–∞—Ç–æ—Ä")
                st.rerun()
            st.caption("–ü–æ–ª–Ω—ã–π –∞–≤–∞—Ä–∏–π–Ω—ã–π –æ—Å—Ç–∞–Ω–æ–≤")
        
        # –°–ë–†–û–° ESD
        if any([esd.esd_level_1, esd.esd_level_2, esd.esd_level_3]):
            if st.button("üîÑ –°–ë–†–û–° ESD", use_container_width=True):
                esd.reset_esd()
                st.success("ESD —Å–±—Ä–æ—à–µ–Ω–∞!")
                st.rerun()
        
        # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
        st.subheader("‚ö†Ô∏è –ê–ö–¢–ò–í–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø")
        
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
        for tank_name, tank in systems['cargo'].tanks.items():
            if tank.volume_percentage > 95:
                warnings.append(f"üî¥ –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ò–ï {tank_name}: {tank.volume_percentage:.1f}%")
            elif tank.volume_percentage > 85:
                warnings.append(f"üü° –í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨ {tank_name}: {tank.volume_percentage:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–Ω–∞
        if abs(systems['system_state'].heel) > 8:
            warnings.append(f"üî¥ –û–ü–ê–°–ù–´–ô –ö–†–ï–ù: {systems['system_state'].heel:.1f}¬∞")
        elif abs(systems['system_state'].heel) > 5:
            warnings.append(f"üü° –ë–û–õ–¨–®–û–ô –ö–†–ï–ù: {systems['system_state'].heel:.1f}¬∞")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if warnings:
            for warning in warnings:
                if "üî¥" in warning:
                    st.error(warning)
                else:
                    st.warning(warning)
        else:
            st.success("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –ù–ï–¢")

if __name__ == "__main__":
    simulator = FPSOSpiritLite()
    simulator.run_optimized()
